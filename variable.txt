------------------------------------------Variable Explanation------------------------------------------

Data:
    noiseData : D x N x V tensor, V views, each view corresponding to a D x N matrix
    L^v       : D x dim matrix
    R         : dim x N matrix

Latent Space learning Model:
                    X^v = L^v * R

mogParam: MoG Parameter struct
    ------------------------------------q(Z)-----------------------------------------
    mogParam.rau  : D x N x T x V tensor
    ------------------------------------q(C)-----------------------------------------
    mogParam.pphi : V x T x K tensor
    ----------------------------------q(\Pi^{'})-------------------------------------
    mogParma.rrPi1:
    mogParam.rrPi2: q(\Pi^{'}) \sim Beta(mogParam.rrPi1, mogParam.rrPi2)
    ----------------------------------q(\alpha)--------------------------------------
    mogParam.alpha : E[\alpha], V x 1 vector
    mogParam.mm    :
    mogParam.nn    : q(\alpha) \sim Gamma(mogParam.mm, mogParam.nn)
    --------------------------------q(\beta_k^{'})-----------------------------------
    mogParam.ssBeta1 :
    mogParam.ssBeta2 : q(\beta_k^{'}) \sim Beta(mogParam.ssBeta1, mogParam.ssBeta2)
    --------------------------------q(\gamma)----------------------------------------
    mogParam.ggamma : E[\gamma], scalar
    mogParam.gg     :
    mogParam.hh     : q(\gamma) \sim Gamma(mogParam.gg, mogParam.hh)
    --------------------------------q(\xi)-------------------------------------------
    mogParam.xi : E[\xi], K x 1 vector
    mogParam.ee :
    mogParam.ff : q(\xi) \sim Gamma(mogParam.ee, mogParam.ff)
    -------------------------------q(\lambda)----------------------------------------
    mogParam.lambda : E[\lambda]
    mogParam.aa     :
    mogParam.bb     : q(\lambda) \sim Gamma(mogParam.aa, mogParam.bb)
    ---------------------------------q(\tau)-----------------------------------------
    mogParam.tau : E[\tau], dim x vector
    mogParam.cc  :
    mogParam.dd  : q(\tau) \sim Gamma(mogParam.cc, mogParam.dd)



lowRankRes:
    -----------------------------------q(L)------------------------------------------
    lowRankRes.L      : D x dim x V tensor
    lowRankRes.sigmaL : dim x dim x D x V tensor
    -----------------------------------q(R)------------------------------------------
    lowRankRes.R      : dim x N matrix
    lowRankRes.sigmaR : dim x dim x N tensor


exLogRes:
    ---------------------------------------------------------------------------------
    exLogRes.LogPiPie  : E[log({\Pi_t^v}^{'})]
    exLogRes.LogPiPie1 : E[1-log({\Pi_t^v}^{'})]
    exLogRes.LogPi     : E[log({\Pi_t^v})]
    ---------------------------------------------------------------------------------
    exLogRes.LogAlpha: E[log(\alpha)]
    ---------------------------------------------------------------------------------
    exLogRes.LogBetaPie  : E[log(\beta_k^{'})]
    exLogRes.LogBetaPie1 : E[1-log(\beta_k^{'})]
    exLogRes.LogBeta     : E[log(\beta)]
    ---------------------------------------------------------------------------------
    exLogRes.LogGamma: E[log(\gamma)]
    ---------------------------------------------------------------------------------
    exLogRes.LogXi: E{log(\xi)}
    ---------------------------------------------------------------------------------
    exLogRes.LogLambda: E[log(\lambda)]
    ---------------------------------------------------------------------------------
    exLogRes.LogTau: E[log(\tau)]

